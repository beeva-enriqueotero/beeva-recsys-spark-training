{"paragraphs":[{"text":"%md\n\n# Recommender System with Spark MLlib. \n## Example 1: Matrix Factorization\n### Load dataset","dateUpdated":"2016-10-17T11:15:59+0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","tableHide":false,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476694170550_1281037180","id":"20161017-104316_1857293220","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Recommender System with Spark MLlib.</h1>\n<h2>Example 1: Matrix Factorization</h2>\n<h3>Load dataset</h3>\n"},"dateCreated":"2016-10-17T10:49:30+0200","dateStarted":"2016-10-17T11:15:59+0200","dateFinished":"2016-10-17T11:15:59+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3637"},{"text":"  import org.apache.spark.mllib.evaluation.{RegressionMetrics, RankingMetrics}\n  import org.apache.spark.mllib.recommendation.{ALS, Rating}\n\n  // Read in the ratings data\n  //val ratings = sc.textFile(\"s3://beeva-research-lab/movielens/ml10M/u5.train\", 1).map { line =>\n  val ratings = sc.textFile(\"/home/enriqueotero/datasets/movielens/ml-100k/u5.base\").map { line =>\n    val fields = line.split(\"\\t\")\n    Rating(fields(0).toInt, fields(1).toInt, fields(2).toDouble - 2.5)\n  }.cache()\n\n\n  //val ratingstest = sc.textFile(\"s3://beeva-research-lab/movielens/ml10M/u5.test\", 1).map { line =>\n  val ratingstest = sc.textFile(\"/home/enriqueotero/datasets/movielens/ml-100k/u5.test\").map { line =>\n    val fields = line.split(\"\\t\")\n    Rating(fields(0).toInt, fields(1).toInt, fields(2).toDouble - 2.5)\n  }.cache()\n\n  // Map ratings to 1 or 0, 1 indicating a movie that should be recommended\n  val binarizedRatings = ratingstest.map(r => Rating(r.user, r.product,\n    if (r.rating > 0) 1.0 else 0.0)).cache()\n","dateUpdated":"2016-10-17T11:15:59+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476694170550_1281421929","id":"20161017-103954_976150493","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.spark.mllib.evaluation.{RegressionMetrics, RankingMetrics}\n\nimport org.apache.spark.mllib.recommendation.{ALS, Rating}\n\nratings: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[317] at map at <console>:38\n\nratingstest: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[320] at map at <console>:38\n\nbinarizedRatings: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[321] at map at <console>:40\n"},"dateCreated":"2016-10-17T10:49:30+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3288","dateFinished":"2016-10-17T11:16:01+0200","dateStarted":"2016-10-17T11:15:59+0200"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476694253006_1684393589","id":"20161017-105053_816614981","dateCreated":"2016-10-17T10:50:53+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3534","dateUpdated":"2016-10-17T11:15:59+0200","dateFinished":"2016-10-17T11:15:59+0200","dateStarted":"2016-10-17T11:15:59+0200","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Analyze dataset</h3>\n"},"text":"%md\n### Analyze dataset"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476694545767_-960356671","id":"20161017-105545_1132278174","dateCreated":"2016-10-17T10:55:45+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3744","dateUpdated":"2016-10-17T11:15:59+0200","dateFinished":"2016-10-17T11:16:02+0200","dateStarted":"2016-10-17T11:15:59+0200","result":{"code":"SUCCESS","type":"TEXT","msg":"\nnumRatings: Long = 80000\n\nnumUsers: Long = 943\n\nnumMovies: Long = 1650\nGot 80000 ratings from 943 users on 1650 movies.\n"},"text":"\n  // Summarize ratings\n  val numRatings = ratings.count()\n  val numUsers = ratings.map(_.user).distinct().count()\n  val numMovies = ratings.map(_.product).distinct().count()\n  println(s\"Got $numRatings ratings from $numUsers users on $numMovies movies.\")"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476694596699_1199901134","id":"20161017-105636_1951042939","dateCreated":"2016-10-17T10:56:36+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3850","dateUpdated":"2016-10-17T11:17:55+0200","dateFinished":"2016-10-17T11:15:59+0200","dateStarted":"2016-10-17T11:15:59+0200","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Build the model</h3>\n"},"text":"%md\n### Build the model"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476694667937_1399075182","id":"20161017-105747_2039026102","dateCreated":"2016-10-17T10:57:47+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3932","dateUpdated":"2016-10-17T11:15:59+0200","dateFinished":"2016-10-17T11:16:06+0200","dateStarted":"2016-10-17T11:16:02+0200","result":{"code":"SUCCESS","type":"TEXT","msg":"\nrank: Int = 10\n\nnumIterations: Int = 10\n\nlambda: Double = 0.015\n\nnumBlocks: Int = -1\n\nalpha: Double = 1.0\n\nmodel: org.apache.spark.mllib.recommendation.MatrixFactorizationModel = org.apache.spark.mllib.recommendation.MatrixFactorizationModel@c414700\n"},"text":"val rank = 10\nval numIterations = 10\nval lambda = 0.015\nval numBlocks = -1\nval alpha = 1.0\nval model = ALS.trainImplicit(ratings, rank, numIterations, lambda, numBlocks, alpha)"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476694676294_-1716236662","id":"20161017-105756_716043208","dateCreated":"2016-10-17T10:57:56+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4007","dateUpdated":"2016-10-17T11:17:59+0200","dateFinished":"2016-10-17T11:16:00+0200","dateStarted":"2016-10-17T11:16:00+0200","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Generate recommendations</h3>\n"},"text":"%md\n### Generate recommendations"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476694725585_-206589247","id":"20161017-105845_1084813655","dateCreated":"2016-10-17T10:58:45+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4099","dateUpdated":"2016-10-17T11:16:00+0200","dateFinished":"2016-10-17T11:16:07+0200","dateStarted":"2016-10-17T11:16:03+0200","result":{"code":"SUCCESS","type":"TEXT","msg":"\nK: Int = 10\n\nNUM_RECS: Int = 10\n\nuserRecommended: org.apache.spark.rdd.RDD[(Int, Array[org.apache.spark.mllib.recommendation.Rating])] = MapPartitionsRDD[563] at map at MatrixFactorizationModel.scala:219\n"},"text":"val K = 10\nval NUM_RECS = 10\n\n// Get sorted top (ten) K predictions for each user and then scale from [0, 1]\nval userRecommended = model.recommendProductsForUsers(NUM_RECS)"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476694771873_563955530","id":"20161017-105931_1582543689","dateCreated":"2016-10-17T10:59:31+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4174","dateUpdated":"2016-10-17T11:18:02+0200","dateFinished":"2016-10-17T11:16:00+0200","dateStarted":"2016-10-17T11:16:00+0200","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Eval recommendations</h3>\n"},"text":"%md\n### Eval recommendations"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476694844184_232225358","id":"20161017-110044_1780113956","dateCreated":"2016-10-17T11:00:44+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4256","dateUpdated":"2016-10-17T11:16:00+0200","dateFinished":"2016-10-17T11:16:09+0200","dateStarted":"2016-10-17T11:16:07+0200","result":{"code":"SUCCESS","type":"TEXT","msg":"\nuserTest: org.apache.spark.rdd.RDD[(Int, Iterable[org.apache.spark.mllib.recommendation.Rating])] = ShuffledRDD[565] at groupBy at <console>:44\n\nuserJoin: org.apache.spark.rdd.RDD[(Int, (Iterable[org.apache.spark.mllib.recommendation.Rating], Array[org.apache.spark.mllib.recommendation.Rating]))] = MapPartitionsRDD[568] at join at <console>:62\n\nrelevantDocuments: org.apache.spark.rdd.RDD[(Array[Int], Array[Int])] = MapPartitionsRDD[569] at map at <console>:64\n\nrelevantDocuments: org.apache.spark.rdd.RDD[(Array[Int], Array[Int])] = MapPartitionsRDD[570] at filter at <console>:66\n\nmetrics: org.apache.spark.mllib.evaluation.RankingMetrics[Int] = org.apache.spark.mllib.evaluation.RankingMetrics@2bf9154d\nMean average precision = 0.05031069781248347\n\nmeanAveragePrecisionAtK: Double = <lazy>\nMAP@10 = 0.05031069781248347\n"},"text":"// Assume that any movie a user rated 3 or higher (which maps to a 1) is a relevant document\n// Compare with top K recommendations\nval userTest = binarizedRatings.groupBy(_.user)\nval userJoin = userTest.join(userRecommended)\n\nvar relevantDocuments = userJoin.map { case (user, (actual, predictions)) =>\n  (predictions.map(_.product), actual.filter(_.rating > 0.0).map(_.product).toArray)\n}\n\n// Skip users with no data in test\nrelevantDocuments = relevantDocuments.filter(_._2.length>0)\n\n// Instantiate metrics object\nval metrics = new RankingMetrics(relevantDocuments)\n\n// Mean average precision\nprintln(s\"Mean average precision = ${metrics.meanAveragePrecision}\")\n\nlazy val meanAveragePrecisionAtK: Double = {\n    relevantDocuments.map { case (pred, lab) =>\n      val labSet = lab.toSet\n\n      if (labSet.nonEmpty) {\n        var i = 0\n        var cnt = 0\n        var precSum = 0.0\n\n        var pred2 = pred.slice(0,K)\n        val n = pred2.length\n\n        while (i < n) {\n          if (labSet.contains(pred2(i))) {\n            cnt += 1\n            precSum += cnt.toDouble / (i + 1)\n          }\n          i += 1\n        }\n\n        0.0+precSum / math.min(labSet.size,K)\n      } else {\n        println(\"Empty ground truth set, check input data\")\n        0.0\n      }\n    }.mean()\n  }\n\n// Mean average precision @ K\nprintln(s\"MAP@${K} = ${metrics.meanAveragePrecision}\")"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476694850432_-1652674828","id":"20161017-110050_1954011114","dateCreated":"2016-10-17T11:00:50+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4337","dateUpdated":"2016-10-17T11:16:00+0200","dateFinished":"2016-10-17T11:16:09+0200","dateStarted":"2016-10-17T11:16:07+0200","result":{"code":"SUCCESS","type":"TEXT","msg":""},"text":""}],"name":"RecSys with Spark MLlib: Example 1","id":"2BZVGC9EV","angularObjects":{"2C1SMUNR2:shared_process":[],"2BZKD1JZ1:shared_process":[],"2BZDY9XYZ:shared_process":[],"2BZAHUAX3:shared_process":[],"2BYA9VV3D:shared_process":[],"2BZXVZE6D:shared_process":[],"2C1KZHX69:shared_process":[],"2BZXKCJRX:shared_process":[],"2BYNPN8SK:shared_process":[],"2BYBJCDXJ:shared_process":[],"2C1AMSD91:shared_process":[],"2BZR97E3N:shared_process":[],"2C15P4D8G:shared_process":[],"2C1RNCA8C:shared_process":[],"2BXA1FW3F:shared_process":[],"2BXSN6C59:shared_process":[],"2C15PG1TG:shared_process":[],"2C21UNK62:shared_process":[]},"config":{"looknfeel":"default"},"info":{},"checkpoint":{"message":"RecSys MLlib. ALS"}}