{"paragraphs":[{"text":"%md\n\n# Recommender System with Spark MLlib. \n## Example 1: Matrix Factorization\n### Load dataset","dateUpdated":"2016-10-20T15:12:19+0200","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476807064208_-1735174479","id":"20161017-104316_1857293220","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Recommender System with Spark MLlib.</h1>\n<h2>Example 1: Matrix Factorization</h2>\n<h3>Load dataset</h3>\n"},"dateCreated":"2016-10-18T06:11:04+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:201","dateFinished":"2016-10-20T15:12:19+0200","dateStarted":"2016-10-20T15:12:19+0200"},{"text":"  import org.apache.spark.mllib.evaluation.{RegressionMetrics, RankingMetrics}\n  import org.apache.spark.mllib.recommendation.{ALS, Rating}\n\n  // Read in the ratings data\n  //val ratings = sc.textFile(\"s3://beeva-research-lab/movielens/ml10M/u5.train\", 1).map { line =>\n  val ratings = sc.textFile(\"/home/enriqueotero/datasets/movielens/ml-100k/u1.base\").map { line =>\n    val fields = line.split(\"\\t\")\n    Rating(fields(0).toInt, fields(1).toInt, fields(2).toDouble - 2.5)\n  }.cache()\n\n\n  //val ratingstest = sc.textFile(\"s3://beeva-research-lab/movielens/ml10M/u5.test\", 1).map { line =>\n  val ratingstest = sc.textFile(\"/home/enriqueotero/datasets/movielens/ml-100k/u1.test\").map { line =>\n    val fields = line.split(\"\\t\")\n    Rating(fields(0).toInt, fields(1).toInt, fields(2).toDouble - 2.5)\n  }.cache()\n\n  // Map ratings to 1 or 0, 1 indicating a movie that should be recommended\n  val binarizedRatings = ratingstest.map(r => Rating(r.user, r.product,\n    if (r.rating > 0) 1.0 else 0.0)).cache()\n","dateUpdated":"2016-10-20T15:12:19+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476807064211_-1734789730","id":"20161017-103954_976150493","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.spark.mllib.evaluation.{RegressionMetrics, RankingMetrics}\n\nimport org.apache.spark.mllib.recommendation.{ALS, Rating}\n\nratings: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[1482] at map at <console>:49\n\nratingstest: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[1485] at map at <console>:49\n\nbinarizedRatings: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[1486] at map at <console>:51\n"},"dateCreated":"2016-10-18T06:11:04+0200","dateStarted":"2016-10-20T15:12:19+0200","dateFinished":"2016-10-20T15:12:20+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:202"},{"text":"%md\n### Analyze dataset","dateUpdated":"2016-10-20T15:12:19+0200","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476807064213_-1737098224","id":"20161017-105053_816614981","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Analyze dataset</h3>\n"},"dateCreated":"2016-10-18T06:11:04+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:203","dateFinished":"2016-10-20T15:12:19+0200","dateStarted":"2016-10-20T15:12:19+0200"},{"text":"\n  // Summarize ratings\n  val numRatings = ratings.count()\n  val numUsers = ratings.map(_.user).distinct().count()\n  val numMovies = ratings.map(_.product).distinct().count()\n  println(s\"Got $numRatings ratings from $numUsers users on $numMovies movies.\")","dateUpdated":"2016-10-20T15:12:19+0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476807064214_-1735943977","id":"20161017-105545_1132278174","result":{"code":"SUCCESS","type":"TEXT","msg":"\nnumRatings: Long = 80000\n\nnumUsers: Long = 943\n\nnumMovies: Long = 1650\nGot 80000 ratings from 943 users on 1650 movies.\n"},"dateCreated":"2016-10-18T06:11:04+0200","dateStarted":"2016-10-20T15:12:19+0200","dateFinished":"2016-10-20T15:12:21+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:204"},{"text":"%md\n### Build the model","dateUpdated":"2016-10-20T15:12:19+0200","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476807064216_-1738252471","id":"20161017-105636_1951042939","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Build the model</h3>\n"},"dateCreated":"2016-10-18T06:11:04+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:205","dateFinished":"2016-10-20T15:12:19+0200","dateStarted":"2016-10-20T15:12:19+0200"},{"text":"val rank = 10\nval numIterations = 10\nval lambda = 0.015\nval numBlocks = -1\nval alpha = 1.0\nval model = ALS.trainImplicit(ratings, rank, numIterations, lambda, numBlocks, alpha)","dateUpdated":"2016-10-20T15:12:19+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476807064217_-1738637219","id":"20161017-105747_2039026102","result":{"code":"SUCCESS","type":"TEXT","msg":"\nrank: Int = 10\n\nnumIterations: Int = 10\n\nlambda: Double = 0.015\n\nnumBlocks: Int = -1\n\nalpha: Double = 1.0\n\nmodel: org.apache.spark.mllib.recommendation.MatrixFactorizationModel = org.apache.spark.mllib.recommendation.MatrixFactorizationModel@5360be71\n"},"dateCreated":"2016-10-18T06:11:04+0200","dateStarted":"2016-10-20T15:12:21+0200","dateFinished":"2016-10-20T15:12:24+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:206"},{"text":"%md\n### Generate recommendations","dateUpdated":"2016-10-20T15:12:19+0200","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476807064219_-1737867722","id":"20161017-105756_716043208","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Generate recommendations</h3>\n"},"dateCreated":"2016-10-18T06:11:04+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:207","dateFinished":"2016-10-20T15:12:19+0200","dateStarted":"2016-10-20T15:12:19+0200"},{"text":"val K = 10\nval NUM_RECS = 10\n\n// Get sorted top (ten) K predictions for each user and then scale from [0, 1]\nval userRecommended = model.recommendProductsForUsers(NUM_RECS)","dateUpdated":"2016-10-20T15:12:19+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476807064219_-1737867722","id":"20161017-105845_1084813655","result":{"code":"SUCCESS","type":"TEXT","msg":"\nK: Int = 10\n\nNUM_RECS: Int = 10\n\nuserRecommended: org.apache.spark.rdd.RDD[(Int, Array[org.apache.spark.mllib.recommendation.Rating])] = MapPartitionsRDD[1728] at map at MatrixFactorizationModel.scala:219\n"},"dateCreated":"2016-10-18T06:11:04+0200","dateStarted":"2016-10-20T15:12:22+0200","dateFinished":"2016-10-20T15:12:24+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:208","focus":true},{"text":"%md\n### Eval recommendations","dateUpdated":"2016-10-20T15:12:19+0200","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476807064220_-1739791466","id":"20161017-105931_1582543689","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Eval recommendations</h3>\n"},"dateCreated":"2016-10-18T06:11:04+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:209","dateFinished":"2016-10-20T15:12:20+0200","dateStarted":"2016-10-20T15:12:20+0200"},{"text":"// Assume that any movie a user rated 3 or higher (which maps to a 1) is a relevant document\n// Compare with top K recommendations\nval userTest = binarizedRatings.groupBy(_.user)\nval userJoin = userTest.join(userRecommended)\n\nvar relevantDocuments = userJoin.map { case (user, (actual, predictions)) =>\n  (predictions.map(_.product), actual.filter(_.rating > 0.0).map(_.product).toArray)\n}\n\n// Skip users with no data in test\nrelevantDocuments = relevantDocuments.filter(_._2.length>0)\n\n// Instantiate metrics object\nval metrics = new RankingMetrics(relevantDocuments)\n\n// Mean average precision\nprintln(s\"Mean average precision = ${metrics.meanAveragePrecision}\")\n\nlazy val meanAveragePrecisionAtK: Double = {\n    relevantDocuments.map { case (pred, lab) =>\n      val labSet = lab.toSet\n\n      if (labSet.nonEmpty) {\n        var i = 0\n        var cnt = 0\n        var precSum = 0.0\n\n        var pred2 = pred.slice(0,K)\n        val n = pred2.length\n\n        while (i < n) {\n          if (labSet.contains(pred2(i))) {\n            cnt += 1\n            precSum += cnt.toDouble / (i + 1)\n          }\n          i += 1\n        }\n\n        0.0+precSum / math.min(labSet.size,K)\n      } else {\n        println(\"Empty ground truth set, check input data\")\n        0.0\n      }\n    }.mean()\n  }\n\n// Mean average precision @ K\nprintln(s\"MAP@${K} = $meanAveragePrecisionAtK\")","dateUpdated":"2016-10-20T15:12:20+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476807064220_-1739791466","id":"20161017-110044_1780113956","result":{"code":"SUCCESS","type":"TEXT","msg":"\nuserTest: org.apache.spark.rdd.RDD[(Int, Iterable[org.apache.spark.mllib.recommendation.Rating])] = ShuffledRDD[1730] at groupBy at <console>:55\n\nuserJoin: org.apache.spark.rdd.RDD[(Int, (Iterable[org.apache.spark.mllib.recommendation.Rating], Array[org.apache.spark.mllib.recommendation.Rating]))] = MapPartitionsRDD[1733] at join at <console>:73\n\nrelevantDocuments: org.apache.spark.rdd.RDD[(Array[Int], Array[Int])] = MapPartitionsRDD[1734] at map at <console>:75\n\nrelevantDocuments: org.apache.spark.rdd.RDD[(Array[Int], Array[Int])] = MapPartitionsRDD[1735] at filter at <console>:77\n\nmetrics: org.apache.spark.mllib.evaluation.RankingMetrics[Int] = org.apache.spark.mllib.evaluation.RankingMetrics@5e78ba43\nMean average precision = 0.05717925184005201\n\nmeanAveragePrecisionAtK: Double = <lazy>\nMAP@10 = 0.12737486695638475\n"},"dateCreated":"2016-10-18T06:11:04+0200","dateStarted":"2016-10-20T15:12:24+0200","dateFinished":"2016-10-20T15:12:27+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:210","focus":true},{"text":"%md\n### Additional checking 1: missing recommendations\n\nCount number of recommendations\n\n","dateUpdated":"2016-10-20T15:12:20+0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476878365447_-45577445","id":"20161019-135925_996223792","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Additional checking 1: missing recommendations</h3>\n<p>Count number of recommendations</p>\n"},"dateCreated":"2016-10-19T13:59:25+0200","dateStarted":"2016-10-20T15:12:20+0200","dateFinished":"2016-10-20T15:12:20+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7001","focus":true},{"text":"userRecommended.flatMapValues(x=>x).count()","dateUpdated":"2016-10-20T15:12:20+0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476807064221_-1740176215","id":"20161017-110050_1954011114","result":{"code":"SUCCESS","type":"TEXT","msg":"\nres680: Long = 9430\n"},"dateCreated":"2016-10-18T06:11:04+0200","dateStarted":"2016-10-20T15:12:25+0200","dateFinished":"2016-10-20T15:12:27+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7175"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476968707833_-1782438027","id":"20161020-150507_206218525","dateCreated":"2016-10-20T15:05:07+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7088","text":"%md\n### Additional checking 2: known items\n\nCount items already view in training","dateUpdated":"2016-10-20T15:12:20+0200","dateFinished":"2016-10-20T15:12:20+0200","dateStarted":"2016-10-20T15:12:20+0200","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Additional checking 2: known items</h3>\n<p>Count items already view in training</p>\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476879324831_646360898","id":"20161019-141524_374110412","dateCreated":"2016-10-19T14:15:24+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4216","dateUpdated":"2016-10-20T15:12:20+0200","dateFinished":"2016-10-20T15:12:29+0200","dateStarted":"2016-10-20T15:12:28+0200","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.spark.rdd.RDD\n\nratingsToRecommendFormat: (rating: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating])org.apache.spark.rdd.RDD[(Int, Array[org.apache.spark.mllib.recommendation.Rating])]\n\ntrainRatings: org.apache.spark.rdd.RDD[(Int, Array[org.apache.spark.mllib.recommendation.Rating])] = MapPartitionsRDD[1744] at mapValues at <console>:53\n\narrayRatingToArrayInt: (x: (Int, Array[org.apache.spark.mllib.recommendation.Rating]))(Int, Array[Int])\n\nuserRecommendedArrayInt: org.apache.spark.rdd.RDD[(Int, Array[Int])] = MapPartitionsRDD[1745] at map at <console>:68\n\nuserTrainArrayInt: org.apache.spark.rdd.RDD[(Int, Array[Int])] = MapPartitionsRDD[1746] at map at <console>:56\n\nuserTrainAndRecommended: org.apache.spark.rdd.RDD[(Int, Int)] = MapPartitionsRDD[1750] at flatMapValues at <console>:77\nAlready view in training: 5919"},"text":"import org.apache.spark.rdd.RDD\n\ndef ratingsToRecommendFormat(rating:RDD[Rating]):RDD[(Int, Array[Rating])] = {\n    val userRecommends = ratings.filter(_.rating>0).map(r => (r.user,r)).groupByKey().mapValues(_.toArray)\n    return userRecommends\n}\n\nval trainRatings=ratingsToRecommendFormat(ratings)\n\n\ndef arrayRatingToArrayInt(x: (Int, Array[Rating])):(Int,Array[Int]) = {\n    return (x._1,x._2.map(_.product))\n}\n    \nval userRecommendedArrayInt = userRecommended.map(x=>(x._1,x._2.map(_.product)))\nval userTrainArrayInt = trainRatings.map(x=>(x._1,x._2.map(_.product)))\n\nval userTrainAndRecommended = userRecommendedArrayInt.cogroup(userTrainArrayInt)\n.map(r=>(r._1,r._2._1.flatMap(r=>r).toSet.intersect(r._2._2.flatMap(r=>r).toSet))).flatMapValues(x=>x)\n\n\nprint(\"Already view in training: \"+userTrainAndRecommended.count())"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476962606429_-1477730210","id":"20161020-132326_1032277790","dateCreated":"2016-10-20T13:23:26+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6356","dateUpdated":"2016-10-20T15:12:20+0200","dateFinished":"2016-10-20T15:12:20+0200","dateStarted":"2016-10-20T15:12:20+0200","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Example</p>\n"},"text":"%md\n\nExample"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476962755940_1648048120","id":"20161020-132555_715915987","dateCreated":"2016-10-20T13:25:55+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6447","dateUpdated":"2016-10-20T15:12:20+0200","dateFinished":"2016-10-20T15:12:30+0200","dateStarted":"2016-10-20T15:12:28+0200","result":{"code":"SUCCESS","type":"TEXT","msg":"\nUSER_ID: Int = 310\n\nuserHistory: Array[Int] = Array(50, 1142)\n\nuserRecommendations: Array[Int] = Array(50, 127, 181, 100, 1, 7, 515, 222, 257, 124)\nAlready viewed items:Set(50)"},"text":"val USER_ID=310\nval userHistory=trainRatings.lookup(USER_ID)(0).map(_.product)\nval userRecommendations=userRecommended.lookup(USER_ID)(0).map(_.product)\nprint(\"Already viewed items:\"+userHistory.intersect(userRecommendations).toSet)"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476962845860_347101530","id":"20161020-132725_1312518274","dateCreated":"2016-10-20T13:27:25+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6628","dateUpdated":"2016-10-20T15:12:20+0200","dateFinished":"2016-10-20T15:12:30+0200","dateStarted":"2016-10-20T15:12:30+0200","result":{"code":"SUCCESS","type":"TEXT","msg":""},"text":""}],"name":"example 1","id":"2BYXKHM1E","angularObjects":{"2C1SMUNR2:shared_process":[],"2BZKD1JZ1:shared_process":[],"2BZDY9XYZ:shared_process":[],"2BZAHUAX3:shared_process":[],"2BYA9VV3D:shared_process":[],"2BZXVZE6D:shared_process":[],"2C1KZHX69:shared_process":[],"2BZXKCJRX:shared_process":[],"2BYNPN8SK:shared_process":[],"2BYBJCDXJ:shared_process":[],"2C1AMSD91:shared_process":[],"2BZR97E3N:shared_process":[],"2C15P4D8G:shared_process":[],"2C1RNCA8C:shared_process":[],"2BXA1FW3F:shared_process":[],"2BXSN6C59:shared_process":[],"2C15PG1TG:shared_process":[],"2C21UNK62:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}